import React, { useState, useEffect } from 'react';
import axios from 'axios';

const App = () => {
  const [tasks, setTasks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showUpdateModal, setShowUpdateModal] = useState(false);
  const [selectedTask, setSelectedTask] = useState(null);
  const [newTask, setNewTask] = useState({
    title: '',
    description: '',
    status: 'pending'
  });

  useEffect(() => {
    fetchTasks();
  }, []);

  const fetchTasks = async () => {
    try {
      const response = await axios.get('http://localhost:8000/tasks');
      setTasks(response.data);
      setLoading(false);
    } catch (error) {
      console.error('Erreur lors du chargement des tâches:', error);
      setLoading(false);
    }
  };

  const createTask = async () => {
    try {
      const response = await axios.post('http://localhost:8000/tasks', newTask);
      setTasks([...tasks, response.data]);
      setNewTask({ title: '', description: '', status: 'pending' });
      window.location.reload();
    } catch (error) {
      console.error('Erreur lors de la création de la tâche:', error);
    }
  };

  const deleteTask = async (taskId) => {
    try {
      await axios.delete(`http://localhost:8000/tasks/${taskId}`);
      setTasks(tasks.filter(task => task.id !== taskId));
      window.location.reload();
    } catch (error) {
      console.error('Erreur lors de la suppression de la tâche:', error);
    }
  };


  const updateTask = async (taskId, updatedTask) => {
    try {
      const response = await axios.put(`http://localhost:8000/tasks/${taskId}`, updatedTask);
      setTasks(tasks.map(task => task.id === taskId ? response.data : task));
      setShowUpdateModal(false);
      window.location.reload();
    } catch (error) {
      console.error('Erreur lors de la mise à jour de la tâche:', error);
    }
  };
  
  

  const handleUpdateClick = (task) => {
    setSelectedTask(task);
    setShowUpdateModal(true);
  };

  return (
    <div>
      <h1>Gestionnaire de Tâches</h1>
      
      <div>
        <input
          value={newTask.title}
          onChange={(e) => setNewTask({...newTask, title: e.target.value})}
          placeholder="Titre de la tâche"
        />
        <input
          value={newTask.description}
          onChange={(e) => setNewTask({...newTask, description: e.target.value})}
          placeholder="Description de la tâche"
        />
        <select
          value={newTask.status}
          onChange={(e) => setNewTask({...newTask, status: e.target.value})}
        >
          <option value="pending">En attente</option>
          <option value="in_progress">En cours</option>
          <option value="completed">Terminé</option>
        </select>
        <button onClick={createTask}>Ajouter une tâche</button>
      </div>

      {loading ? (
        <p>Chargement en cours...</p>
      ) : (
        <ul>
          {tasks.map((task, index) => (
            <li key={`task-${task.id || index}`}>
              {task.title} - {task.status}
              <button onClick={() => deleteTask(task.id)}>Supprimer</button>
              <button onClick={() => handleUpdateClick(task)}>Modifier</button>
            </li>
          ))}
        </ul>
      )}

      {showUpdateModal && selectedTask && (
        <div style={{
          position: 'fixed',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          backgroundColor: 'white',
          padding: '20px',
          boxShadow: '0 0 10px rgba(0,0,0,0.5)',
          borderRadius: '5px'
        }}>
          <h2>Modifier la tâche</h2>
          <input
            key="title-input"
            value={selectedTask.title}
            onChange={(e) => setSelectedTask({...selectedTask, title: e.target.value})}
          />
          <input
            key="description-input"
            value={selectedTask.description}
            onChange={(e) => setSelectedTask({...selectedTask, description: e.target.value})}
          />
          <select
            key="status-select"
            value={selectedTask.status}
            onChange={(e) => setSelectedTask({...selectedTask, status: e.target.value})}
          >
            <option key="pending" value="pending">En attente</option>
            <option key="in_progress" value="in_progress">En cours</option>
            <option key="completed" value="completed">Terminé</option>
          </select>
          <button onClick={() => updateTask(selectedTask.id, selectedTask)}>Enregistrer</button>
          <button onClick={() => setShowUpdateModal(false)}>Annuler</button>
        </div>
      )}
    </div>
  );
}

export default App;